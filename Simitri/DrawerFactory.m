//
//  DrawerFactory.m
//  Simitri
//
//  Created by John on 19/06/2014.
//  Copyright (c) 2014 jgrindall. All rights reserved.
//

#import "DrawerFactory.h"
#import "Drawer_P6_236.h"
#import "Drawer_CMM_2r22.h"
#import "Drawer_PM_rr.h"
#import "Drawer_P1_O.h"
#import "Drawer_P3_333.h"
#import "Drawer_PGG_22x.h"
#import "Drawer_P2_2222.h"
#import "Drawer_P4G_4r2.h"
#import "Drawer_P4_244.h"
#import "Drawer_PMM_r2222.h"
#import "Drawer_PMG_r22.h"
#import "Drawer_CM_rx.h"
#import "Drawer_P31M_3r3.h"
#import "Drawer_P3M1_r333.h"
#import "Drawer_PG_xx.h"
#import "Drawer_P4M_r244.h"
#import "Drawer_P6M_r236.h"

@implementation DrawerFactory

+ (ADrawer*) getDrawer:(NSInteger)drawerNum withScreenSize:(CGSize) screenSize{
	if(drawerNum == 0){
		return [[Drawer_P1_O alloc] initWithScreenSize:screenSize withDrawerNum:drawerNum];
	}
	else if(drawerNum == 1){
		return [[Drawer_P2_2222 alloc] initWithScreenSize:screenSize withDrawerNum:drawerNum];
	}
	else if(drawerNum == 2){
		return [[Drawer_P3_333 alloc] initWithScreenSize:screenSize withDrawerNum:drawerNum];
	}
	else if(drawerNum == 3){
		return [[Drawer_P4_244 alloc] initWithScreenSize:screenSize withDrawerNum:drawerNum];
	}
	else if(drawerNum == 4){
		return [[Drawer_P6_236 alloc] initWithScreenSize:screenSize withDrawerNum:drawerNum];
	}
	else if(drawerNum == 5){
		return [[Drawer_PG_xx alloc] initWithScreenSize:screenSize withDrawerNum:drawerNum];
	}
	else if(drawerNum == 6){
		return [[Drawer_PM_rr alloc] initWithScreenSize:screenSize withDrawerNum:drawerNum];
	}
	else if(drawerNum == 7){
		return [[Drawer_PMM_r2222 alloc] initWithScreenSize:screenSize withDrawerNum:drawerNum];
	}
	else if(drawerNum == 8){
		return [[Drawer_PMG_r22 alloc] initWithScreenSize:screenSize withDrawerNum:drawerNum];
	}
	else if(drawerNum == 9){
		return [[Drawer_PGG_22x alloc] initWithScreenSize:screenSize withDrawerNum:drawerNum];
	}
	else if(drawerNum == 10){
		return [[Drawer_CM_rx alloc] initWithScreenSize:screenSize withDrawerNum:drawerNum];
	}
	else if(drawerNum == 11){
		return [[Drawer_CMM_2r22 alloc] initWithScreenSize:screenSize withDrawerNum:drawerNum];
	}
	else if(drawerNum == 12){
		return [[Drawer_P31M_3r3 alloc] initWithScreenSize:screenSize withDrawerNum:drawerNum];
	}
	else if(drawerNum == 13){
		return [[Drawer_P3M1_r333 alloc] initWithScreenSize:screenSize withDrawerNum:drawerNum];
	}
	else if(drawerNum == 14){
		return [[Drawer_P4G_4r2 alloc] initWithScreenSize:screenSize withDrawerNum:drawerNum];
	}
	else if(drawerNum == 15){
		return [[Drawer_P4M_r244 alloc] initWithScreenSize:screenSize withDrawerNum:drawerNum];
	}
	else{
		return [[Drawer_P6M_r236 alloc] initWithScreenSize:screenSize withDrawerNum:drawerNum];
	}
}

+ (NSString*) getLabelForDrawerNum:(NSInteger)i{
	if(i == 0){
		return @"p1 (O)";
	}
	else if(i == 1){
		return @"p2 (2222)";
	}
	else if(i == 2){
		return @"p3 (333)";
	}
	else if(i == 3){
		return @"p4 (244)";
	}
	else if(i == 4){
		return @"p6 (236)";
	}
	else if(i == 5){
		return @"pg (xx)";
	}
	else if(i == 6){
		return @"pm (**)";
	}
	else if(i == 7){
		return @"pmm (*2222)";
	}
	else if(i == 8){
		return @"pmg (*22)";
	}
	else if(i == 9){
		return @"pgg (22x)";
	}
	else if(i == 10){
		return @"cm (*x)";
	}
	else if(i == 11){
		return @"cmm (2*22)";
	}
	else if(i == 12){
		return @"p31m (3*3)";
	}
	else if(i == 13){
		return @"p3m1 (*333)";
	}
	else if(i == 14){
		return @"p4g (4*2)";
	}
	else if(i == 15){
		return @"p4m (*244)";
	}
	else {
		return @"p6m (*236)";
	}
}

+ (NSString*) getMessageForDrawerNum:(NSInteger)i{
	if(i == 0){
		return @"There are 17 templates, each labelled with the official scientific name followed by the mathematical name in brackets.\nThis is the simplest, containing two translations which together make the pattern repeat.";
	}
	else if(i == 1){
		return @"This template contains only rotations of order 2 (180 degrees).  When you draw inside one of the marked triangles the symmetries will make your pattern repeat to cover the plane. These triangles are called 'fundamental regions'.";
	}
	else if(i == 2){
		return @"A hexagonal lattice made by rotations of order 3 (120 degrees).\nClick on any of them to see!";
	}
	else if(i == 3){
		return @"Contains two rotation centres of order 4 (90 degrees), and one rotation centre of order two (180 degrees). It has no reflections or glide reflections. Click on any of them to see!";
	}
	else if(i == 4){
		return @"Another hexagonal lattice, this template has centres of rotational symmetry of orders 6, 3 and 2, but no reflections.\nClick on the centres to see!";
	}
	else if(i == 5){
		return @"The symmetries of this template are generated by two glide reflections. A glide reflection is a translation followed by a reflection. In the diagram below they are shown by dashed arrows, translating along the arrow and then reflecting in the line of the arrow.";
	}
	else if(i == 6){
		return @"In this template a reflection axis (dashed line) generates the reflective symmetry and a translation (arrow) covers the plane. There is no rotational symmetry.";
	}
	else if(i == 7){
		return @"pmm is generated by two axes of reflection in two perpendicular directions, making a rectangular grid of reflections.";
	}
	else if(i == 8){
		return @"This template is generated by rotations of order two (180 degrees), and unlike the previous template, lines of reflections in just one direction.";
	}
	else if(i == 9){
		return @"pgg is generated by two perpendicular glide reflections shown by the dashed arrows.\nRemember a glide reflection is composed of a translation along the arrow followed by a reflection in the line of the arrow.";
	}
	else if(i == 10){
		return @"This template is generated by reflections (dashed lines) and glide reflections (dashed arrows).\nThe glide reflection is parallel to, and half-way between the axes of reflection.";
	}
	else if(i == 11){
		return @"cmm is generated by reflections in two perpendicular directions, along with a centre of rotation of order 2 (180 degrees). The fundamental region is a right angled triangle.";
	}
	else if(i == 12){
		return @"This template is generated by three non-parallel lines of reflection making angles of 60 degrees with each other, as well as a rotation of order 3 (120 degrees) at the centre of each equilateral triangle.";
	}
	else if(i == 13){
		return @"p3m1 has a hexagonal lattice, and is generated by reflections in the three sides of an equilateral triangle.";
	}
	else if(i == 14){
		return @"p4g is generated by two centres of rotation of order four (90 degrees), and two perpendicular lines of reflection.";
	}
	else if(i == 15){
		return @"This template is generated by reflecting in the sides of a right-angled triangle.";
	}
	else {
		return @"The final template is generated by reflections in six different directions at angles of 30, 60 and 90 degrees.";
	}
}

+ (NSString*) imageDesForIndex:(NSInteger)i{
	if(i == 0){
		return @"The simplest wallpaper pattern, called p1(O), containing only translations.";
	}
	else if(i == 1){
		return @"Ceiling of an Ancient Egyptian tomb with symmetry group p2(2222).";
	}
	else if(i == 2){
		return @"Tiled wall in the Alhambra Palace, built by Muslim emirs in Spain in the 14th Century. Can you see the centres of rotation or order 3? (Use the shapes, ignore the fact that the colours are different!)";
	}
	else if(i == 3){
		return @"Renaissance earthenware showing symmetry group p4(244), with centres of rotation of orders 4 and 2.";
	}
	else if(i == 4){
		return @"A Persian ornamental design with symmetry group p6(236). Can you see the centres of rotation of orders 6, 3 and 2?";
	}
	else if(i == 5){
		return @"Mat with herringbone pattern from Ancient Egypt, with symmetry group pg(xx). The glide reflections are vertical - can you spot them?";
	}
	else if(i == 6){
		return @"Indian metalwork shown at the 1851 Great Exhibition, with parallel lines of reflection and one translation. (The small decorative loops joining the large circles must be ignored!)";
	}
	else if(i == 7){
		return @"Egyptian mummy case stored in The Louvre Museum, Paris with symmetry group pmm(*2222). Can you see the lines of reflection at right angles to each other?";
	}
	else if(i == 8){
		return @"Bowl from Kerma, an archaeological site in the Sudan, at least 9000 years old. The lines of reflection are horizontal. Can you see the rotation centres of order 2?";
	}
	else if(i == 9){
		return @"Bronze vessel from Nimroud, Assyria, an ancient city mentioned in the Bible, located in modern-day Iraq. Can you see horizontal and vertical glide reflections?";
	}
	else if(i == 10){
		return @"Dress of the God Amun, from the massive rock temples at Abu Simbel - built in Egypt in the 13th Century BC, containing lines of reflection and glide reflections.";
	}
	else if(i == 11){
		return @"A Persian tapestry with vertical and horizontal lines of reflection making a rectangular grid. The centres of rotation of order 2 are in the centre of each rectangle.";
	}
	else if(i == 12){
		return @"Painted porcelain from China, with symmetry group p31m(3*3). Can you see the lines of reflection and centres of rotation of order 3?";
	}
	else if(i == 13){
		return @"Persian glazed tile with symmetry group p3m1(*333). Lines of reflection make a grid of equilateral triangles, with a rotation centre of order 3 at the centre of each triangle.";
	}
	else if(i == 14){
		return @"Painted Chinese porcelain, with symmetry group p4g(4*2). Can you find the fundamental region?";
	}
	else if(i == 15){
		return @"Detail from the 12 Century Cathedral of Bourges, France, with symmetry group p4m(*244).";
	}
	else {
		return @"Byzantine marble pavement with symmetry group p6m(*236). Can you see all the lines of reflection?";
	}
}

+ (NSString*) imageUrlForIndex:(NSInteger)i{
	NSArray* names = [NSArray arrayWithObjects:@"p1_2.jpg", @"p2.jpg", @"p3.jpg", @"p4.jpg", @"p6_2.jpg", @"pg.jpg", @"pm.jpg", @"pmm.jpg", @"pmg_4.jpg", @"pgg.jpg", @"cm_1.jpg", @"cmm_2.jpg", @"p31m_2.jpg", @"p3m1.jpg", @"p4g.jpg", @"p4m_2.jpg", @"p6m_4.jpg", nil];
	return names[i];
}

+ (NSString*) markedImageUrlForIndex:(NSInteger)i{
	NSString* s = [DrawerFactory imageUrlForIndex:i];
	return [s stringByReplacingOccurrencesOfString:@"." withString:@"_mark."];
	
}

@end
